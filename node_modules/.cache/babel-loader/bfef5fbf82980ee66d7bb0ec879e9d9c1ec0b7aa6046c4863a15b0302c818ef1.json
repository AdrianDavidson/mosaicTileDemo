{"ast":null,"code":"'use strict';\n\n/**\n * @type {{[key:string]: {[key:string]: number}}}\n */\nconst conversions = {\n  // Absolute length units\n  px: {\n    px: 1,\n    cm: 96 / 2.54,\n    mm: 96 / 25.4,\n    q: 96 / 101.6,\n    in: 96,\n    pt: 96 / 72,\n    pc: 16\n  },\n  cm: {\n    px: 2.54 / 96,\n    cm: 1,\n    mm: 0.1,\n    q: 0.025,\n    in: 2.54,\n    pt: 2.54 / 72,\n    pc: 2.54 / 6\n  },\n  mm: {\n    px: 25.4 / 96,\n    cm: 10,\n    mm: 1,\n    q: 0.25,\n    in: 25.4,\n    pt: 25.4 / 72,\n    pc: 25.4 / 6\n  },\n  q: {\n    px: 101.6 / 96,\n    cm: 40,\n    mm: 4,\n    q: 1,\n    in: 101.6,\n    pt: 101.6 / 72,\n    pc: 101.6 / 6\n  },\n  in: {\n    px: 1 / 96,\n    cm: 1 / 2.54,\n    mm: 1 / 25.4,\n    q: 1 / 101.6,\n    in: 1,\n    pt: 1 / 72,\n    pc: 1 / 6\n  },\n  pt: {\n    px: 0.75,\n    cm: 72 / 2.54,\n    mm: 72 / 25.4,\n    q: 72 / 101.6,\n    in: 72,\n    pt: 1,\n    pc: 12\n  },\n  pc: {\n    px: 0.0625,\n    cm: 6 / 2.54,\n    mm: 6 / 25.4,\n    q: 6 / 101.6,\n    in: 6,\n    pt: 6 / 72,\n    pc: 1\n  },\n  // Angle units\n  deg: {\n    deg: 1,\n    grad: 0.9,\n    rad: 180 / Math.PI,\n    turn: 360\n  },\n  grad: {\n    deg: 400 / 360,\n    grad: 1,\n    rad: 200 / Math.PI,\n    turn: 400\n  },\n  rad: {\n    deg: Math.PI / 180,\n    grad: Math.PI / 200,\n    rad: 1,\n    turn: Math.PI * 2\n  },\n  turn: {\n    deg: 1 / 360,\n    grad: 0.0025,\n    rad: 0.5 / Math.PI,\n    turn: 1\n  },\n  // Duration units\n  s: {\n    s: 1,\n    ms: 0.001\n  },\n  ms: {\n    s: 1000,\n    ms: 1\n  },\n  // Frequency units\n  hz: {\n    hz: 1,\n    khz: 1000\n  },\n  khz: {\n    hz: 0.001,\n    khz: 1\n  },\n  // Resolution units\n  dpi: {\n    dpi: 1,\n    dpcm: 1 / 2.54,\n    dppx: 1 / 96\n  },\n  dpcm: {\n    dpi: 2.54,\n    dpcm: 1,\n    dppx: 2.54 / 96\n  },\n  dppx: {\n    dpi: 96,\n    dpcm: 96 / 2.54,\n    dppx: 1\n  }\n};\n/**\n * @param {number} value\n * @param {string} sourceUnit\n * @param {string} targetUnit\n * @param {number|false} precision\n */\nfunction convertUnit(value, sourceUnit, targetUnit, precision) {\n  const sourceUnitNormalized = sourceUnit.toLowerCase();\n  const targetUnitNormalized = targetUnit.toLowerCase();\n  if (!conversions[targetUnitNormalized]) {\n    throw new Error('Cannot convert to ' + targetUnit);\n  }\n  if (!conversions[targetUnitNormalized][sourceUnitNormalized]) {\n    throw new Error('Cannot convert from ' + sourceUnit + ' to ' + targetUnit);\n  }\n  const converted = conversions[targetUnitNormalized][sourceUnitNormalized] * value;\n  if (precision !== false) {\n    precision = Math.pow(10, Math.ceil(precision) || 5);\n    return Math.round(converted * precision) / precision;\n  }\n  return converted;\n}\nmodule.exports = convertUnit;","map":{"version":3,"names":["conversions","px","cm","mm","q","in","pt","pc","deg","grad","rad","Math","PI","turn","s","ms","hz","khz","dpi","dpcm","dppx","convertUnit","value","sourceUnit","targetUnit","precision","sourceUnitNormalized","toLowerCase","targetUnitNormalized","Error","converted","pow","ceil","round","module","exports"],"sources":["C:/Users/Adrian/Desktop/kisi_project/mosaicTileDemo/node_modules/postcss-calc/src/lib/convertUnit.js"],"sourcesContent":["'use strict';\n/**\n * @type {{[key:string]: {[key:string]: number}}}\n */\nconst conversions = {\n  // Absolute length units\n  px: {\n    px: 1,\n    cm: 96 / 2.54,\n    mm: 96 / 25.4,\n    q: 96 / 101.6,\n    in: 96,\n    pt: 96 / 72,\n    pc: 16,\n  },\n  cm: {\n    px: 2.54 / 96,\n    cm: 1,\n    mm: 0.1,\n    q: 0.025,\n    in: 2.54,\n    pt: 2.54 / 72,\n    pc: 2.54 / 6,\n  },\n  mm: {\n    px: 25.4 / 96,\n    cm: 10,\n    mm: 1,\n    q: 0.25,\n    in: 25.4,\n    pt: 25.4 / 72,\n    pc: 25.4 / 6,\n  },\n  q: {\n    px: 101.6 / 96,\n    cm: 40,\n    mm: 4,\n    q: 1,\n    in: 101.6,\n    pt: 101.6 / 72,\n    pc: 101.6 / 6,\n  },\n  in: {\n    px: 1 / 96,\n    cm: 1 / 2.54,\n    mm: 1 / 25.4,\n    q: 1 / 101.6,\n    in: 1,\n    pt: 1 / 72,\n    pc: 1 / 6,\n  },\n  pt: {\n    px: 0.75,\n    cm: 72 / 2.54,\n    mm: 72 / 25.4,\n    q: 72 / 101.6,\n    in: 72,\n    pt: 1,\n    pc: 12,\n  },\n  pc: {\n    px: 0.0625,\n    cm: 6 / 2.54,\n    mm: 6 / 25.4,\n    q: 6 / 101.6,\n    in: 6,\n    pt: 6 / 72,\n    pc: 1,\n  },\n  // Angle units\n  deg: {\n    deg: 1,\n    grad: 0.9,\n    rad: 180 / Math.PI,\n    turn: 360,\n  },\n  grad: {\n    deg: 400 / 360,\n    grad: 1,\n    rad: 200 / Math.PI,\n    turn: 400,\n  },\n  rad: {\n    deg: Math.PI / 180,\n    grad: Math.PI / 200,\n    rad: 1,\n    turn: Math.PI * 2,\n  },\n  turn: {\n    deg: 1 / 360,\n    grad: 0.0025,\n    rad: 0.5 / Math.PI,\n    turn: 1,\n  },\n  // Duration units\n  s: {\n    s: 1,\n    ms: 0.001,\n  },\n  ms: {\n    s: 1000,\n    ms: 1,\n  },\n  // Frequency units\n  hz: {\n    hz: 1,\n    khz: 1000,\n  },\n  khz: {\n    hz: 0.001,\n    khz: 1,\n  },\n  // Resolution units\n  dpi: {\n    dpi: 1,\n    dpcm: 1 / 2.54,\n    dppx: 1 / 96,\n  },\n  dpcm: {\n    dpi: 2.54,\n    dpcm: 1,\n    dppx: 2.54 / 96,\n  },\n  dppx: {\n    dpi: 96,\n    dpcm: 96 / 2.54,\n    dppx: 1,\n  },\n};\n/**\n * @param {number} value\n * @param {string} sourceUnit\n * @param {string} targetUnit\n * @param {number|false} precision\n */\nfunction convertUnit(value, sourceUnit, targetUnit, precision) {\n  const sourceUnitNormalized = sourceUnit.toLowerCase();\n  const targetUnitNormalized = targetUnit.toLowerCase();\n\n  if (!conversions[targetUnitNormalized]) {\n    throw new Error('Cannot convert to ' + targetUnit);\n  }\n\n  if (!conversions[targetUnitNormalized][sourceUnitNormalized]) {\n    throw new Error('Cannot convert from ' + sourceUnit + ' to ' + targetUnit);\n  }\n\n  const converted =\n    conversions[targetUnitNormalized][sourceUnitNormalized] * value;\n\n  if (precision !== false) {\n    precision = Math.pow(10, Math.ceil(precision) || 5);\n\n    return Math.round(converted * precision) / precision;\n  }\n\n  return converted;\n}\n\nmodule.exports = convertUnit;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}